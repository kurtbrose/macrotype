# Generated via: macrotype macrotype/meta_types.py -o __macrotype__/macrotype/meta_types.pyi
# Do not edit by hand
from typing import Any, Callable

_OVERLOAD_REGISTRY: dict[str, dict[str, list[Callable[..., Any]]]]

def _ORIG_GET_OVERLOADS(func: Callable[..., Any]) -> list[Callable[..., Any]]: ...

def _ORIG_OVERLOAD(func: Callable[..., Any]) -> Callable[..., Any]: ...

def overload(func: Callable[..., Any]) -> Callable[..., Any]: ...

def get_overloads(func: Callable[..., Any]) -> list[Callable[..., Any]]: ...

def overload_for(*args, **kwargs): ...

def clear_registry() -> None: ...

def patch_typing(): ...

def get_caller_module(level: int) -> str: ...

def set_module(obj: Any, module: str) -> None: ...

def emit_as(name: str): ...

def make_literal_map(name: str, mapping: dict[str | int, str | int]): ...

_NoneType = NoneType

def _make_class(name: str, annotations: dict[str, Any]) -> type: ...

def _strip_type(ann: Any, null: Any) -> Any: ...

def all_annotations(cls: type) -> dict[str, Any]: ...

def optional(cls: type, *, null: Any) -> dict[str, Any]: ...

def required(cls: type, *, null: Any) -> dict[str, Any]: ...

def pick(cls: type, keys: list[str]) -> dict[str, Any]: ...

def omit(cls: type, keys: list[str]) -> dict[str, Any]: ...

def final(cls: type) -> dict[str, Any]: ...

def replace(name: str, cls: type, mapping: dict[str, Any]) -> type: ...
