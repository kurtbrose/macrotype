# Generated via: macrotype macrotype
# Do not edit by hand
from typing import Any, Callable, get_overloads, overload

_OVERLOAD_REGISTRY: dict[str, dict[str, list[Callable[..., Any]]]]

_ORIG_GET_OVERLOADS = get_overloads

_ORIG_OVERLOAD = overload

def overload(func: Callable[..., Any]) -> Callable[..., Any]: ...

def get_overloads(func: Callable[..., Any]) -> list[Callable[..., Any]]: ...

def overload_for(*args, **kwargs): ...

def clear_registry() -> None: ...

def patch_typing(): ...

def get_caller_module(level: int) -> str: ...

def set_module(obj: Any, module: str) -> None: ...

def emit_as(name: str): ...

def make_literal_map(name: str, mapping: dict[int | str, int | str]): ...

def all_annotations(cls: type) -> dict[str, Any]: ...
