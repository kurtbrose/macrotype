# Generated via: macrotype macrotype -o __macrotype__/macrotype
# Do not edit by hand
from ast import If, NodeTransformer, expr, stmt
from pathlib import Path

ModuleType = module

def _header_lines(command: str | None) -> list[str]: ...

def _extract_source_info(code: str) -> tuple[list[str], dict[int, str], dict[str, int]]: ...

def _guess_module_name(path: Path) -> str | None: ...

class _TypeCheckingTransformer(NodeTransformer):
    @staticmethod
    def _contains_type_checking(expr: expr) -> bool: ...
    def visit_If(self, node: If) -> stmt: ...

def _exec_with_type_checking(code: str, module: module) -> None: ...

def load_module_from_path(path: Path, *, type_checking: bool, module_name: str | None) -> module: ...

def load_module_from_code(code: str, name: str, *, type_checking: bool, module_name: str | None) -> module: ...

def stub_lines(module: module) -> list[str]: ...

def write_stub(dest: Path, lines: list[str], command: str | None) -> None: ...

def iter_python_files(target: Path) -> list[Path]: ...

def _link_stub_overlay(src: Path, dest: Path, overlay_dir: Path) -> None: ...

def process_file(src: Path, dest: Path | None, *, command: str | None, stub_overlay_dir: Path | None) -> Path: ...

def process_directory(directory: Path, out_dir: Path | None, *, command: str | None, stub_overlay_dir: Path | None) -> list[Path]: ...
