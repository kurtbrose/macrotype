# Generated via: macrotype macrotype/modules/emit.py -o __macrotype__/macrotype/modules/emit.pyi
# Do not edit by hand
from collections.abc import Iterable
from macrotype.modules.symbols import ModuleInfo, Symbol
from typing import Any, ParamSpec, TypeVar, TypeVarTuple

INDENT: str

def emit_module(mi: ModuleInfo) -> list[str]: ...

def _collect_typing_names(symbols: Iterable[Symbol]) -> set[str]: ...

def _add_comment(line: str, comment: None | str) -> str: ...

def collect_all_annotations(mi: ModuleInfo) -> list[Any]: ...

def flatten_annotation_atoms(ann: Any) -> dict[int, Any]: ...

def build_name_map(atoms: Iterable[Any], context: dict[str, Any]) -> dict[int, str]: ...

def stringify_annotation(ann: Any, name_map: dict[int, str]) -> str: ...

def _emit_symbol(sym: Symbol, name_map: dict[int, str], *, indent: int) -> list[str]: ...

def _stringify_typevar(tv: TypeVar, name_map: dict[int, str]) -> str: ...

def _stringify_paramspec(ps: ParamSpec) -> str: ...

def _stringify_typevartuple(tv: TypeVarTuple) -> str: ...
