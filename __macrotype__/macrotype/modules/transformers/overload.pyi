from typing import Any, Callable

from macrotype.meta_types import get_overloads
from macrotype.modules.ir import ClassDecl, FuncDecl, ModuleDecl

_get_overloads = get_overloads

def _annotation_for_value(value: Any) -> Any: ...
def _make_literal_overload(
    fn: Callable[..., Any], args: tuple, kwargs: dict, result: Any
) -> Callable[..., Any]: ...
def _expand_function(fn: Callable[..., Any], sym: FuncDecl) -> list[FuncDecl]: ...
def _get_function(sym: FuncDecl) -> Callable[..., Any] | None: ...
def _transform_class(sym: ClassDecl, cls: type) -> None: ...
def expand_overloads(mi: ModuleDecl) -> None: ...
