from dataclasses import dataclass

from macrotype.types.ir import ParsedTy, Ty, TyRoot, TyTypeVar

@dataclass(frozen=True)
class ParseEnv:
    module: None | str
    typevars: dict[str, TyTypeVar]
    in_typed_dict: bool
    def get_tv(self, name: str) -> None | TyTypeVar: ...

def _tyname_of(obj: object) -> Ty: ...
def _maybe_to_ir(tp: None | object, env: None | ParseEnv) -> None | Ty: ...
def _litval_of(val: object) -> object: ...
def _to_ir(tp: object, env: ParseEnv) -> Ty: ...
def parse_root(tp: object, env: None | ParseEnv) -> TyRoot: ...
def parse(tp: object, env: None | ParseEnv) -> ParsedTy: ...
