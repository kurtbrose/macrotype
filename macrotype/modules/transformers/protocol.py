from __future__ import annotations

"""Prune autogenerated methods from ``typing.Protocol`` classes."""

from typing import Any

from macrotype.modules.scanner import ModuleInfo
from macrotype.modules.symbols import ClassSymbol, FuncSymbol

# Methods inserted by ``Protocol`` machinery which should be removed
_PROTOCOL_METHOD_NAMES = {"_proto_hook", "_no_init_or_replace_init"}


def _transform_class(sym: ClassSymbol, cls: type[Any]) -> None:
    if getattr(cls, "_is_protocol", False):
        sym.members = tuple(
            m
            for m in sym.members
            if not (isinstance(m, FuncSymbol) and m.name in _PROTOCOL_METHOD_NAMES)
        )
    for m in sym.members:
        if isinstance(m, ClassSymbol):
            inner = getattr(cls, m.name, None)
            if isinstance(inner, type):
                _transform_class(m, inner)


def prune_protocol_methods(mi: ModuleInfo) -> None:
    """Remove Protocol-generated methods within ``mi``."""

    for sym in mi.symbols:
        if isinstance(sym, ClassSymbol):
            cls = getattr(mi.mod, sym.name, None)
            if isinstance(cls, type):
                _transform_class(sym, cls)
